<?xml version="1.0" encoding="UTF-8"?>
<!-- (C) 2012-2015 OpenStack Foundation, All Rights Reserved -->
<!--*******************************************************-->
<!--         Import Common XML Entities                    -->
<!--                                                       -->
<!--     You can resolve the entities with xmllint         -->
<!--                                                       -->
<!--        xmllint -noent os-image-v2.wadl                -->
<!--*******************************************************-->
<!DOCTYPE application [
   <!ENTITY % common  SYSTEM "common.ent">
   %common;
   <!ENTITY % common_project  SYSTEM "../../../common_project.ent">
   %common_project;
   ]>
<application xmlns="http://wadl.dev.java.net/2009/02"
   xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0"
   xmlns:db="http://docbook.org/ns/docbook"
   xmlns:common="http://docs.openstack.org/common/api/v1.0"
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:imageapi="http://docs.openstack.org/image/api/v2"
   xmlns:csapi="http://docs.openstack.org/image/api/v2">
   <grammars>
      <include href="xsd/api.xsd"/>
      <include href="xsd/api-common.xsd"/>
   </grammars>
   <!--*******************************************************-->
   <!--             All Resources                             -->
   <!--*******************************************************-->
   <resources base="https://glance.example.com/" xml:id="os-image-v2">
      <resource id="versions" path="/">
         <method href="#listVersions-image-null-v2"/>
         <resource id="versionspath" path="versions">
            <method href="#listVersions-image-v2"/>
         </resource>
      </resource>
      <resource id="version" path="//v2">
         <resource id="Images" type="#ImageList" path="images">
            <method href="#createImage-v2"/>
            <resource path="{image_id}" id="image_id">
               &image_idParameter;
               <method href="#getImage-v2"/>
               <method href="#updateImage-v2"/>
               <method href="#deleteImage-v2"/>
               <resource id="actions" path="actions">
                  <resource id="reactivate" path="reactivate">
                     <method href="#reactivateImage-v2"/>
                  </resource>
                  <resource id="deactivate" path="deactivate">
                     <method href="#deactivateImage-v2"/>
                  </resource>
               </resource>
               <resource id="file" path="file">
                  <method href="#storeImageFile-v2"/>
                  <method href="#getImageFile-v2"/>
               </resource>
               <resource id="Tags" path="tags">
                  <resource path="{tag}" id="tag">
                     &tagParameter;
                     <method href="#addImageTag-v2"/>
                     <method href="#deleteImageTag-v2"/>
                  </resource>
               </resource>
               <resource id="Members" type="#MemberList"
                  path="members">
                  <method href="#createImageMember-v2"/>
                  <resource path="{member_id}" id="member_id">
                     &member_idParameter;
                     <method href="#getImageMember-v2"/>
                     <method href="#deleteImageMember-v2"/>
                     <method href="#updateImageMember-v2"/>
                  </resource>
               </resource>
            </resource>
         </resource>
         <resource id="Tasks" path="tasks">
            <method href="#createTasks-v2"/>
            <method href="#listTasks-v2"/>
            <resource path="{task_id}" id="task_id">
               <method href="#showTasks-v2"/>
            </resource>
         </resource>
      </resource>
   </resources>
   <!--*******************************************************-->
   <!--               Resource Types                          -->
   <!--*******************************************************-->
   <resource_type id="ImageList">
      <method href="#listImages-v2"/>
   </resource_type>
   <resource_type id="MemberList">
      <method href="#listImageMembers-v2"/>
   </resource_type>
   <!--*******************************************************-->
   <!--               All Methods                             -->
   <!--*******************************************************-->
   <method name="GET" id="listVersions-image-null-v2">
      <wadl:doc xml:lang="EN" title="List API versions"
         xmlns="http://docbook.org/ns/docbook">
         <para role="shortdesc">Lists information about available Image
            service API versions.
         </para>
      </wadl:doc>
      <response status="300">
         <representation mediaType="application/json">
            <wadl:doc xmlns="http://docbook.org/ns/docbook"
               xml:lang="EN">
               <xsdxt:code
                  href="samples/image-versions-response.json"/>
            </wadl:doc>
         </representation>
      </response>
   </method>
   <method name="GET" id="listVersions-image-v2">
      <wadl:doc xml:lang="EN" title="List API versions"
         xmlns="http://docbook.org/ns/docbook">
         <para role="shortdesc">Lists information about available Image
            service API versions.
         </para>
      </wadl:doc>
      <response status="200">
         <representation mediaType="application/json">
            <wadl:doc xmlns="http://docbook.org/ns/docbook"
               xml:lang="EN">
               <xsdxt:code
                  href="samples/image-versions-response.json"/>
            </wadl:doc>
         </representation>
      </response>
   </method>
   <!-- images methods -->
   <method name="GET" id="listImages-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="List images">
         <para role="shortdesc">(Since Image API v2.0) Lists public virtual machine (VM)
            images.
         </para>
         <para>
            Returns a subset of the larger collection of images and a link
            that you can use to get the next set of images. You should always
            check for the presence of a <code>next</code> link and use it as
            the URI in a subsequent HTTP GET request. You should follow this
            pattern until a <code>next</code> link is no longer provided. The
            next link preserves any query parameters that you send in your
            initial request. You can use the <code>first</code> link to jump
            back to the first page of the collection. If you prefer to
            paginate through images manually, use the <code>limit</code> and
            <code>marker</code> parameters.
         </para>
         <para>
            The list operation accepts several types of query parameters that
            let you filter the results of the returned collection.
         </para>
         <para>
            A client can provide direct comparison filters using most image
            attributes, such as <code>name=Ubuntu</code>,
            <code>visibility=public</code>, and so on. A client cannot filter
            on tags or anything defined as a <code>link</code> in the json-
            schema, such as self, file, or schema.
         </para>
         <para>You can use the <code>size_min</code> and
            <code>size_max</code> query parameters to perform
            greater-than and less-than filtering of images based
            on their <code>size</code> attribute. The size is
            measured in bytes and refers to the size of an image
            when it is stored on disk.
         </para>
         <para>For example, sending a <code>size_min</code> filter
            of 1048576 and <code>size_max</code> of 4194304
            filters the container to include only images that are
            between 1 and 4 MB.
         </para>
         <para>You can see a list of VM images which status is in
            <code>active</code>, <code>queued</code>, or
            <code>saving</code>.
         </para>
         <para>
            You can use query parameters to sort the results of this operation.
         </para>
         <itemizedlist>
            <listitem>
               <para>
                  <code>sort_key</code>. Sorts by the requested image
                  attribute. Sorts in the natural sorting direction of the image attribute that
                  is provided as the <code>sort_key</code>.
               </para>
            </listitem>
            <listitem>
               <para>
                  <code>sort_dir</code>. Sorts in a sort direction.
               </para>
            </listitem>
            <listitem>
               <para>
                  <code>sort</code>. Sorts by one or more sets of attribute
                  and sort direction combinations. If you omit the sort direction in a set,
                  the default is <code>desc</code>.
               </para>
            </listitem>
         </itemizedlist>
         <para>To specify the <code>sort_key</code> and
            <code>sort_dir</code> query parameters to sort the results:
         </para>
            <programlisting language="json">GET /v2/images?sort_key=name&amp;sort_dir=asc&amp;sort_key=status&amp;sort_dir=desc</programlisting>
         <para>To specify the <code>sort</code> query parameter to sort the results:
         </para>
            <programlisting language="json">GET /v2/images?sort=name:asc,status:desc</programlisting>
      </wadl:doc>
      <request>
         <representation mediaType="application/json">
            &limitMarkerReqParameter;
            &imageListReqParameters;
         </representation>
      </request>
      <response status="200">
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/image-list-response.json"/>
            </wadl:doc>
            &imagesParameter; &statusParameter;
            &nameParameter; &tagsParameter; &container_formatParameter;
            &created_at-ResponseParameter; &disk_formatParameter;
            &updated_at-ResponseParameter; &min_diskParameter;
            &protectedParameter; &idParameter; &min_ramParameter;
            &checksumParameter; &ownerParameter;
            &visibilityParameter; &virtual_sizeParameter;
            &sizeParameter; &propertiesParameter;
            &location_urlParameter; &metadataParameter;
            &direct_urlParameter; &selfParameter;
            &fileParameter; &image_schemaParameter;
            &images_schemaParameter;
            &firstParameter;
         </representation>
      </response>
   </method>
   <method name="POST" id="createImage-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Create image">
         <para role="shortdesc">(Since Image API v2.0) Creates a virtual machine (VM)
            image.
         </para>
         <para>Created with a <code>Location</code> header that
            contains the newly-created URI for the image. Response
            body represents the created image entity.
         </para>
         <para>Synchronous Postconditions</para>
         <itemizedlist>
            <listitem>
               <para>With correct permissions, you can see
                  the image status as <code>queued</code> through API
                  calls.
               </para>
            </listitem>
            <listitem>
               <para>With correct permissions, you can see
                  the image status as <code>active</code> through API
                  calls if you created the image with
                  <code>Location</code> header.
               </para>
            </listitem>
         </itemizedlist>
      </wadl:doc>
      <request>
         <representation mediaType="application/json"
            element="image">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code href="samples/image-create-req.json"/>
            </wadl:doc>
            <param xmlns="http://wadl.dev.java.net/2009/02"
               name="name" style="plain" type="xsd:string"
               required="true">
            <wadl:doc xmlns="http://docbook.org/ns/docbook"
               xmlns:wadl="http://wadl.dev.java.net/2009/02"
               xml:lang="EN">
               <para>
                  Name for the image. The name of an image is not unique to an
                  Image service node. The API cannot expect users to know the
                  names of images owned by others.
               </para>
            </wadl:doc>
            </param>
            <param xmlns="http://wadl.dev.java.net/2009/02"
               name="id" style="plain" type="csapi:uuid"
               required="false">
            <wadl:doc xmlns="http://docbook.org/ns/docbook"
               xmlns:wadl="http://wadl.dev.java.net/2009/02"
               xml:lang="EN">
               <para>
                  The image ID.
               </para>
            </wadl:doc>
            </param>
            <param xmlns="http://wadl.dev.java.net/2009/02"
               name="visibility" style="plain" type="xsd:string"
               required="false">
            <wadl:doc xmlns="http://docbook.org/ns/docbook"
               xmlns:wadl="http://wadl.dev.java.net/2009/02"
               xml:lang="EN">
               <para>Image visibility. Public or private.
                  Default is public.
               </para>
            </wadl:doc>
            </param>
            <param xmlns="http://wadl.dev.java.net/2009/02"
               name="tags" style="plain" type="xsd:list"
               required="false">
            <wadl:doc xmlns="http://docbook.org/ns/docbook"
               xmlns:wadl="http://wadl.dev.java.net/2009/02"
               xml:lang="EN">
               <para>Image tags.</para>
            </wadl:doc>
            </param>
            &container_formatRequestParameter; &disk_formatRequestParameter;
            &min_diskRequestParameter; &min_ramRequestParameter;
            &protectedRequestParameter; &propertiesRequestParameter;
         </representation>
      </request>
      <response status="201">
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/image-create-response.json"/>
            </wadl:doc>
            &statusParameter; &container_formatParameter;
            &min_ramParameter; &updated_at-ResponseParameter;
            &ownerParameter; &min_diskParameter;
            &tagsParameter; &visibilityParameter;
            &idParameter; &sizeParameter; &virtual_sizeParameter;
            &nameParameter; &checksumParameter;
            &created_at-ResponseParameter; &disk_formatParameter;
            &propertiesParameter; &protectedParameter;
            &locationParameter; &selfParameter;
            &fileParameter; &image_schemaParameter;
         </representation>
      </response>
   </method>
   <!-- images/{image_id} methods -->
   <method name="PATCH" id="updateImage-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Update image">
         <para role="shortdesc">
             (Since Image API v2.0) Updates an image.
         </para>
         <para>
            Depending on the referenced target location, this operation
            performs one of these actions:
         </para>
         <table rules="all" frame="border">
            <caption>Image update actions</caption>
            <col width="30%"/>
            <col width="70%"/>
            <thead>
                <tr>
                    <th>Target location</th>
                    <th>Update action</th>
                </tr>
            </thead>
            <tbody>
               <tr>
                  <td>
                     <para>
                        An array index
                     </para>
                  </td>
                  <td>
                     <para>
                        A new value is inserted into the array at the index.
                     </para>
                  </td>
               </tr>
               <tr>
                  <td>
                     <para>
                        An object member that does not exist
                     </para>
                  </td>
                  <td>
                     <para>
                        A new member is added to the object.
                     </para>
                  </td>
               </tr>
               <tr>
                  <td>
                     <para>
                        An object member that exists
                     </para>
                  </td>
                  <td>
                     <para>
                        The member value is replaced.
                     </para>
                  </td>
               </tr>
            </tbody>
         </table>
         <para>
            The operation object must contain a <code>value</code> member that
            contains the value to add. For example:
         </para>
<programlisting language="json">{
    "op": "add",
    "path": "/a/b/c",
    "value": [
        "foo",
        "bar"
    ]
}</programlisting>
         <para>
            The target location must reference one of these values:
         </para>
         <itemizedlist>
            <listitem>
               <para>
                  The root of the target document. The value is the
                  entire content of the target document.
               </para>
            </listitem>
            <listitem>
               <para>
                  A member to add to an object. The value is added to that
                  object at that location. If the member already exists, it is
                  replaced by the value.
               </para>
            </listitem>
            <listitem>
               <para>
                  An element to add to the array. The value is added to the
                  array at the location. Any element that is at or above the
                  index is shifted one position to the right. The index must
                  not be greater than the number of elements in the array. If
                  you use the hyphen (-) character to index the end of the
                  array, the value is appended to the array. See <link
                  xlink:href="http://tools.ietf.org/html/rfc6901">JavaScript
                  Object Notation (JSON) Pointer</link>.
               </para>
            </listitem>
         </itemizedlist>
         <para>
            Because this operation adds to existing objects and arrays, its
            target location often does not exist.
         </para>
         <para>
            The request body must conform to one of these media types:
         </para>
         <itemizedlist spacing="compact">
            <listitem>
               <para><code>application/openstack-images-v2.0-json-patch</code></para>
            </listitem>
            <listitem>
               <para><code>application/openstack-images-v2.1-json-patch</code>
                  (since Image API v2.2)
               </para>
            </listitem>
         </itemizedlist>
         <para>
            You can also use the &PATCH; method to add or remove image
            properties.
         </para>
         <para>
            For information about the &PATCH; method and the available media
            types, see <link
            xlink:href="http://specs.openstack.org/openstack/glance-specs/specs/api/v2/http-patch-image-api-v2.html">Image API v2
            HTTP PATCH media types</link>.
         </para>
         <para>Preconditions</para>
         <itemizedlist>
            <listitem>
               <para>
                  When you add a location to or replace a location in the image,
                  you must set the <code>disk_format</code> and
                  <code>container_format</code> parameters in the image.
               </para>
            </listitem>
            <listitem>
               <para>
                  When you replace a location, that location must be previously
                  set in the image.
               </para>
            </listitem>
         </itemizedlist>
         <para>Synchronous Postconditions</para>
         <itemizedlist>
            <listitem>
               <para>
                  With correct permissions, you can view the updated values of
                  the attributes of the image.
               </para>
            </listitem>
            <listitem>
               <para>
                  After you add a location to an image that had no location
                  and with correct permissions, you can use API calls to view
                  the image status as <code>active</code>.
               </para>
            </listitem>
            <listitem>
               <para>
                  After you remove all locations from the image and with
                  correct permissions, you can use API calls to view the image
                  status as <code>queued</code>.
               </para>
            </listitem>
         </itemizedlist>
         <para>Troubleshooting</para>
         <itemizedlist>
            <listitem>
               <para>
                  If you cannot update locations, your request might be
                  missing some information. Make sure that you meet the
                  preconditions and run the request again. If the request
                  fails again, review your API request.
               </para>
            </listitem>
         </itemizedlist>
      </wadl:doc>
      <request>
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code href="samples/image-update-req.json"/>
            </wadl:doc>
            &pathParameter; &valueParameter; &opParameter;
            &urlParameter; &metadataParameter;
         </representation>
      </request>
      <response status="200">
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/image-update-response.json"/>
            </wadl:doc>
            &statusParameter;
            &nameParameter; &tagsParameter; &container_formatParameter;
            &created_at-ResponseParameter; &disk_formatParameter;
            &updated_at-ResponseParameter; &min_diskParameter;
            &protectedParameter; &idParameter; &min_ramParameter;
            &checksumParameter; &ownerParameter;
            &visibilityParameter; &sizeParameter;
            &location_urlParameter; &metadataParameter;
            &propertiesParameter; &direct_urlParameter; &selfParameter;
            &fileParameter; &image_schemaParameter;
         </representation>
      </response>
   </method>
   <method name="GET" id="getImage-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Show image details">
         <para role="shortdesc">(Since Image API v2.0) Shows details for an image.
         </para>
         <para>The response body contains a single image entity.</para>
         <para>Preconditions</para>
         <itemizedlist>
            <listitem>
               <para>The image must exist.</para>
            </listitem>
         </itemizedlist>
      </wadl:doc>
      <response status="200">
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/image-details-response.json"/>
            </wadl:doc>
            &statusParameter;
            &nameParameter; &tagsParameter; &container_formatParameter;
            &created_at-ResponseParameter; &disk_formatParameter;
            &updated_at-ResponseParameter; &min_diskParameter;
            &protectedParameter; &idParameter; &min_ramParameter;
            &checksumParameter; &ownerParameter;
            &visibilityParameter; &sizeParameter;
            &location_urlParameter; &metadataParameter;
            &propertiesParameter; &direct_urlParameter; &selfParameter;
            &fileParameter; &image_schemaParameter;
         </representation>
      </response>
      &getFaults;
   </method>
   <method name="POST" id="reactivateImage-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Reactivate image">
         <para role="shortdesc">(Since Image API v2.0) Reactivates an image.
         </para>
         <para>
            The reactivate operation returns an error if the image status is
            not <code>active</code> or <code>deactivated</code>.
         </para>
         <para>Preconditions</para>
         <itemizedlist>
            <listitem>
               <para>The image must exist.</para>
            </listitem>
         </itemizedlist>
      </wadl:doc>
      <response status="204">
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/image-details-response.json"/>
            </wadl:doc>
         </representation>
      </response>
   </method>
   <method name="POST" id="deactivateImage-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Deactivate image">
         <para role="shortdesc">(Since Image API v2.0) Deactivates an image.
         </para>
         <para>
            If you try to download a deactivated image, the 403 Forbidden
            error is returned. Also, image locations are not visible for
            deactivated images unless the user is an administrative user.
         </para>
         <para>
            The deactivate operation returns an error if the image status is
            not <code>active</code> or <code>deactivated</code>.
         </para>
         <para>Preconditions</para>
         <itemizedlist>
            <listitem>
               <para>The image must exist.</para>
            </listitem>
         </itemizedlist>
      </wadl:doc>
      <response status="204">
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/image-details-deactivate-response.json"/>
            </wadl:doc>
         </representation>
      </response>
   </method>
   <method name="DELETE" id="deleteImage-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Delete image">
         <para role="shortdesc">
            (Since Image API v2.0) Deletes an image.
         </para>
         <para>You cannot delete images with the <code>protected</code>
            attribute set to true (boolean).
         </para>
         <para>Preconditions</para>
         <itemizedlist>
            <listitem>
               <para>You can delete an image in all status
                  except <code>deleted</code>.
               </para>
            </listitem>
            <listitem>
               <para>You must first set the <code>protected</code> attribute
                  to <code>false</code> (boolean) and then perform
                  the delete.
               </para>
            </listitem>
         </itemizedlist>
         <para>Synchronous Postconditions</para>
         <itemizedlist>
            <listitem>
               <para>The response is empty and returns the
                  HTTP 204 status code.
               </para>
            </listitem>
            <listitem>
               <para>The image is deleted in images index.
               </para>
            </listitem>
            <listitem>
               <para>The binary image data managed by OpenStack
                  Image service is deleted from the storage node if the
                  deleted image stores image data in the node.
               </para>
            </listitem>
         </itemizedlist>
         <para>Troubleshooting</para>
         <itemizedlist>
            <listitem>
               <para>
                  The response returns the HTTP 403 status code when the
                  <code>protected</code> attribute is set to
                  <code>true</code> even if you have correct permissions.
                  Ensure that you meet the preconditions and run the request
                  again. If the request fails again, review your API request.
               </para>
            </listitem>
         </itemizedlist>
      </wadl:doc>
      <response status="204"/>
      &fault403;
   </method>
   <!-- images/{image_id}/file methods -->
   <method name="PUT" id="storeImageFile-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Upload binary image data">
         <para role="shortdesc">(Since
            Image API v2.0) Uploads binary image data.
         </para>
         <para>Set the <code>Content-Type</code> request header to
            <code>application/octet-stream</code>.
         </para>
         <para>Example call:
         </para>
<programlisting>curl -i -X PUT -H "X-Auth-Token: $token" -H "Content-Type: application/octet-stream" \
   -d @/home/glance/ubuntu-12.10.qcow2 $image_url/v2/images/{image_id}/file</programlisting>
         <para>Preconditions</para>
         <para>
            Before you can store binary image data, you must meet the
            following preconditions:
         </para>
         <itemizedlist>
            <listitem>
               <para>
                  The image must exist.
               </para>
            </listitem>
            <listitem>
               <para>
                  You must set the disk and container formats in the image.
               </para>
            </listitem>
            <listitem>
               <para>The image status must be <code>queued</code>.
               </para>
            </listitem>
            <listitem>
               <para>Your image storage quota must be sufficient.
               </para>
            </listitem>
            <listitem>
               <para>
                  The size of the data that you want to store must not exceed
                  the size that the OpenStack Image service allows.
               </para>
            </listitem>
         </itemizedlist>
         <para>Synchronous Postconditions</para>
         <itemizedlist>
            <listitem>
               <para>With correct permissions, you can see the
                  image status as <code>active</code> through API calls.
               </para>
            </listitem>
            <listitem>
               <para>With correct access, you can see the stored
                  data in the storage system that OpenStack Image service
                  manages.
               </para>
            </listitem>
         </itemizedlist>
         <para>Troubleshooting</para>
         <itemizedlist>
            <listitem>
               <para>
                  If you cannot store the data, your request might lack
                  information or you exceeded your allotted quota. Ensure that
                  you meet the preconditions and run the request again. If the
                  request fails again, review your API request.
               </para>
            </listitem>
            <listitem>
               <para>
                  The storage back ends for storing the data must have enough
                  free storage space to accommodate the size of the data.
               </para>
            </listitem>
         </itemizedlist>
      </wadl:doc>
      <response status="204"/>
   </method>
   <method name="GET" id="getImageFile-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Download binary image data">
         <para role="shortdesc">(Since
            Image API v2.0) Downloads binary image data.
         </para>
         <para>Example call: <code>curl -i -X GET -H "X-Auth-Token:
            $token"
            $image_url/v2/images/{image_id}/file</code>
         </para>
         <para>
            The response body contains the raw binary data that represents the
            actual virtual disk. The <code>Content-Type</code> header contains
            the <code>application/octet-stream</code> value. The <code
            >Content-MD5</code> header contains an MD5 checksum of the image
            data. Clients are encouraged to use this checksum to verify the
            integrity of the image data that they receive.
         </para>
         <para></para>
         <para>Preconditions</para>
         <itemizedlist>
            <listitem>
               <para>The images must exist.</para>
            </listitem>
         </itemizedlist>
         <para>Synchronous Postconditions</para>
         <itemizedlist>
            <listitem>
               <para>You can download the binary image data
                  in your machine if the image has image
                  data.
               </para>
            </listitem>
            <listitem>
               <para>If image data exists, the call returns the
                  HTTP <code>200</code> status code.
               </para>
            </listitem>
            <listitem>
               <para>If no image data exists, the call returns
                  the HTTP <code>204</code> status code.
               </para>
            </listitem>
         </itemizedlist>
      </wadl:doc>
      <request>
         <representation mediaType="application/json">
            &Content-RangeParameter;
         </representation>
      </request>
      <response status="200 204"/>
      &fault403;
   </method>
   <!-- images/{image_id}/tags/{tag} methods -->
   <method name="PUT" id="addImageTag-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Add image tag">
         <para role="shortdesc">
            (Since Image API v2.0) Adds a tag to an image.
         </para>
      </wadl:doc>
      <response status="204"/>
   </method>
   <method name="DELETE" id="deleteImageTag-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Delete image tag">
         <para role="shortdesc">
            (Since Image API
            v2.0) Deletes a tag from an image.
         </para>
      </wadl:doc>
      <response status="204"/>
   </method>
   <!-- images/{image_id}/members methods -->
   <method name="GET" id="getImageMember-v2">
      <wadl:doc xml:lang="EN" title="Show image member details"
         xmlns="http://docbook.org/ns/docbook">
         <para role="shortdesc">(Since Image API v2.2) Shows image member details.</para>
         <para>Response body is a single image member entity.
         </para>
         <para>Preconditions</para>
         <itemizedlist>
            <listitem>
               <para>The image must exist.
               </para>
            </listitem>
            <listitem>
               <para>You must be the owner or a member of
                  the image.
               </para>
            </listitem>
         </itemizedlist>
      </wadl:doc>
      <response status="200">
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/image-member-details-response.json"
                  />
            </wadl:doc>
           <!--  &memberListParameter; -->
         </representation>
      </response>
   </method>
   <method name="GET" id="listImageMembers-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="List image members">
         <para role="shortdesc">(Since Image API v2.1) Lists the tenants with whom this
            image has been shared.
         </para>
         <para>If a user with whom this image is shared makes this
            call, the member list contains only information for
            that user.
         </para>
         <para>If a user with whom this image has not been shared
            makes this call, the call returns the HTTP 404 status
            code.
         </para>
         <para>Preconditions</para>
         <itemizedlist>
            <listitem>
               <para>The image must exist.
               </para>
            </listitem>
            <listitem>
               <para>You must be the owner or a member of
                  the image.
               </para>
            </listitem>
         </itemizedlist>
      </wadl:doc>
      <response status="200">
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/image-members-list-response.json"
                  />
            </wadl:doc>
            <!--  &memberListParameter; -->
            &membersParameter; &statusParameter;
            &created_at-ResponseParameter; &updated_at-ResponseParameter;
            &image_idParameter; &member_idParameter;
            &member_schemaParameter; &members_schemaParameter;
         </representation>
      </response>
      <response status="404"/>
   </method>
   <method name="POST" id="createImageMember-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Create image member">
         <para role="shortdesc">(Since Image API v2.1) Adds a tenant ID as an
            image member.
         </para>
         <para>Preconditions</para>
         <itemizedlist>
            <listitem>
               <para>The images must exist.
               </para>
            </listitem>
            <listitem>
               <para>You can only add a new member to an
                  image which 'visibility' attribute is <code>private</code>.
               </para>
            </listitem>
            <listitem>
               <para>You must be the owner of the
                  image.
               </para>
            </listitem>
         </itemizedlist>
         <para>Synchronous Postconditions</para>
         <itemizedlist>
            <listitem>
               <para>With correct permissions, you can see
                  the member status of the image as <code>pending</code>
                  through API calls.
               </para>
            </listitem>
         </itemizedlist>
         <para>Troubleshooting</para>
         <itemizedlist>
            <listitem>
               <para>
                  Even if you have correct permissions, if the
                  <code>visibility</code> attribute is set to
                  <code>public</code>, the request returns the HTTP 403
                  response code. Ensure that you meet the preconditions and
                  run the request again. If the request fails again, review
                  your API request.
               </para>
            </listitem>
            <listitem>
               <para>
                  If the member is already a member for the image, the service
                  returns the <code>Conflict (409)</code> response code. If
                  you meant to specify a different member, run the
                  request again.
               </para>
            </listitem>
         </itemizedlist>
      </wadl:doc>
      <request>
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/image-member-create-request.json"
                  />
            </wadl:doc>
         </representation>
      </request>
      <response status="200">
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/image-member-create-response.json"
                  />
            </wadl:doc>
          <!--   &memberListParameter; -->
         </representation>
      </response>
      <response status="403"  xmlns="http://wadl.dev.java.net/2009/02">
         <representation mediaType="application/xml"
            element="csapi:invalidVisibility"/>
         <representation mediaType="application/json"/>
      </response>
      <response status="409"  xmlns="http://wadl.dev.java.net/2009/02">
         <representation mediaType="application/xml"
            element="csapi:memberConflict"/>
         <representation mediaType="application/json"/>
      </response>
   </method>
   <method name="PUT" id="updateImageMember-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Update image member">
         <para role="shortdesc">
            (Since Image API v2.1) Sets the status for an image member.
         </para>
         <para>Preconditions</para>
         <itemizedlist>
            <listitem>
               <para>The images must exist.
               </para>
            </listitem>
            <listitem>
               <para>You must be a member of the
                image.
               </para>
            </listitem>
         </itemizedlist>
         <para>Synchronous Postconditions</para>
         <itemizedlist>
            <listitem>
               <para>If you update the member status to
                  <code>accepted</code> and have the correct permissions,
                  you see the image in list images responses.
               </para>
            </listitem>
            <listitem>
               <para>With correct permissions, you can see
                  the updated member status of the image through API
                  calls.
               </para>
            </listitem>
         </itemizedlist>
      </wadl:doc>
      <request>
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/image-member-update-request.json"
                  />
            </wadl:doc>
            <param xmlns="http://wadl.dev.java.net/2009/02"
               required="true" name="status" style="plain"
               type="xsd:string">
            <wadl:doc xmlns="http://docbook.org/ns/docbook"
               xmlns:wadl="http://wadl.dev.java.net/2009/02"
               xml:lang="EN">
               <para>The status of this image
                  member.
               </para>
            </wadl:doc>
            </param>
         </representation>
      </request>
      <response status="200">
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/image-member-update-response.json"
                  />
            </wadl:doc>
           <!--  &memberListParameter; -->
         </representation>
      </response>
   </method>
   <method name="DELETE" id="deleteImageMember-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Delete image member">
         <para role="shortdesc">
            (Since Image API v2.1) Deletes a tenant ID from the member list of
            an image.
         </para>
         <para>Preconditions</para>
         <itemizedlist>
            <listitem>
               <para>The image must exist.
               </para>
            </listitem>
            <listitem>
               <para>You must be the owner of the
                  image.
               </para>
            </listitem>
         </itemizedlist>
         <para>Synchronous Postconditions</para>
         <itemizedlist>
            <listitem>
               <para>The member is removed from
                  the image members.
               </para>
            </listitem>
         </itemizedlist>
         <para>Troubleshooting</para>
         <itemizedlist>
            <listitem>
               <para>
                  Even if you have correct permissions, if you are not the
                  owner of The image, the request returns the HTTP
                  403 error code. Ensure that you meet the preconditions
                  and run the request again. If the request fails again,
                  review your API request.
               </para>
            </listitem>
         </itemizedlist>
      </wadl:doc>
      <response status="204"/>
      <response status="403"  xmlns="http://wadl.dev.java.net/2009/02">
         <representation mediaType="application/xml"
            element="csapi:forbidden"/>
         <representation mediaType="application/json"/>
      </response>
   </method>
   <method name="GET" id="listTasks-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="List tasks">
         <para role="shortdesc">Lists tasks.</para>
      </wadl:doc>
      <request>
         <representation mediaType="application/json">
            &tasksListParameters;
         </representation>
      </request>
      <response status="200">
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/tasks-list-response.json"/>
            </wadl:doc>
         </representation>
      </response>
   </method>
   <method name="POST" id="createTasks-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Create tasks">
         <para role="shortdesc">Creates a task.</para>
      </wadl:doc>
      <request>
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/tasks-create-request.json"/>
            </wadl:doc>
         </representation>
      </request>
      <response status="201">
      </response>
   </method>
   <method name="GET" id="showTasks-v2">
      <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
         title="Show tasks">
         <para role="shortdesc">Shows details for a task.
         </para>
      </wadl:doc>
      <request>
         <representation mediaType="application/json">
            &tasksShowParameters;
         </representation>
      </request>
      <response status="200">
         <representation mediaType="application/json">
            <wadl:doc xml:lang="EN"
               xmlns="http://docbook.org/ns/docbook">
               <xsdxt:code
                  href="samples/tasks-show-response.json"/>
            </wadl:doc>
         </representation>
      </response>
   </method>
</application>
