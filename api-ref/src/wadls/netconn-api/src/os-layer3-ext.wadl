<?xml version="1.0" encoding="UTF-8"?>
<!-- (C) 2013-2014 OpenStack Foundation, All Rights Reserved -->
<!--*******************************************************-->
<!--         Import Common XML Entities                    -->
<!--                                                       -->
<!--     You can resolve the entities with xmllint          -->
<!--                                                       -->
<!--        xmllint -noent os-layer3-ext.wadl              -->
<!--*******************************************************-->
<!DOCTYPE application [
    <!ENTITY % common  SYSTEM "common.ent">
    %common;
    <!ENTITY % common_project  SYSTEM "../../common_project.ent">
    %common_project;
]>
<application xmlns="http://wadl.dev.java.net/2009/02"
    xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:linkend="http://www.w3.org/1999/linkend"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:wadl="http://wadl.dev.java.net/2009/02"
    xmlns:csapi="http://docs.openstack.org/compute/api/v1.1">
    <!--*******************************************************-->
    <!--             All Resources                             -->
    <!--*******************************************************-->
    <resources base="https://neutron.example.com/"
        xml:id="os-layer3-ext-v2.0">
        <resource id="version" path="//v2.0">
                <resource id="Routers" type="#RouterList"
                    path="routers">
                    <method href="#createRouter"/>
                    <resource path="{router_id}" id="router_id">
                        <param
                            xmlns="http://wadl.dev.java.net/2009/02"
                            name="router_id" style="template"
                            type="csapi:UUID">
                            <wadl:doc
                                xmlns="http://docbook.org/ns/docbook"
                                xml:lang="EN" title="Router ID"
                                   ><para>The UUID of the
                                   router.</para></wadl:doc>
                        </param>
                        <method href="#showRouter"/>
                        <method href="#updateRouter"/>
                        <method href="#deleteRouter"/>
                        <resource id="add_router_interface"
                            path="add_router_interface">
                            <method href="#addRouterInterface"/>
                        </resource>
                        <resource id="remove_router_interface"
                            path="remove_router_interface">
                            <method href="#removeRouterInterface"/>
                        </resource>
                    </resource>
                </resource>
                <resource id="FloatingIps" type="#FloatingIpList"
                    path="floatingips">
                    <method href="#createFloatingIp"/>
                    <resource path="{floatingip_id}"
                        id="floatingip_id">
                        <param
                            xmlns="http://wadl.dev.java.net/2009/02"
                            name="floatingip_id" style="template"
                            type="csapi:UUID">
                            <wadl:doc
                                xmlns="http://docbook.org/ns/docbook"
                                xml:lang="EN" title="Floating IP ID"
                                   ><para>The UUID of the floating
                                   IP.</para></wadl:doc>
                        </param>
                        <method href="#showFloatingIp"/>
                        <method href="#updateFloatingIp"/>
                        <method href="#deleteFloatingIp"/>
                    </resource>
                </resource>
        </resource>
    </resources>
    <resource_type id="RouterList">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="Router list">
            <para>A list of routers.</para>
        </wadl:doc>
        <method href="#listRouters"/>
    </resource_type>
    <resource_type id="FloatingIpList">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="Floating IPs list">
            <para>A list of floating IPs.</para>
        </wadl:doc>
        <method href="#listFloatingIps"/>
    </resource_type>
    <!--*******************************************************-->
    <!--               All Methods                             -->
    <!--*******************************************************-->
    <method name="GET" id="listRouters">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="List routers">
            <para role="shortdesc">Lists logical routers that are
                accessible to the tenant who submits the
                request.
            </para>
            <para>Default policy settings return only those routers
                that are owned by the tenant who submits the request,
                unless an admin user submits the request.
            </para>
            <para>This example request lists routers in JSON
                format:</para>
            <programlisting>GET /v2.0/routers
Accept: application/json</programlisting>
            <para>Use the <code>fields</code> query parameter to
                control which fields are returned in the response
                body. Additionally, you can filter results by using
                query string parameters. For information, see <link
                    xlink:href="http://specs.openstack.org/openstack/neutron-specs/specs/api/networking_general_api_information.html#filtering-and-column-selection"
                    >Filtering and Column Selection</link>.</para>
        </wadl:doc>
        <response status="200"> &statusParameter;
            &external-gateway-infoParameter; &nameParameter;
            &admin-state-upParameter; &tenant-idParameter;
            &distributedOptionalParameter; &routesParameter; &haOptionalParameter;
            &idParameter; <representation mediaType="application/json"
                element="csapi:router">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN">
                    <xsdxt:code
                        href="api_samples/routers-get-resp.json"/>
                </wadl:doc>
            </representation>
        </response> &fault401; </method>
    <method name="POST" id="createRouter">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="Create router">
            <para role="shortdesc">Creates a logical router.</para>
            <para>This operation creates a new logical router. When it
                is created, a logical router does not have any
                internal interface; it is not associated to any
                subnet. You can optionally specify an external gateway
                for a router at create time. The external gateway for
                the router must be plugged into an external network.
                An external network has its extended field
                    <code>router:external</code> set to <code>true</code>. To
                specify an external gateway, the identifier of the
                external network must be passed in the
                    <code>external_gateway_info</code> attribute in
                the request body, as follows:</para>
            <programlisting language="json">{
   "router": {
      "external_gateway_info": {
         "network_id": "8ca37218-28ff-41cb-9b10-039601ea7e6b"
      }
   }
}</programlisting>
        </wadl:doc>
        <request> &routerParameter; &external-gateway-infoOptionalParameter;
            &nameOptionalParameter; &admin-state-upOptionalParameter;
               <representation
                mediaType="application/json" element="csapi:router">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN">
                    <xsdxt:code
                        href="api_samples/router-post-req.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="201"> &routerParameter; &statusParameter;
            &external-gateway-infoParameter; &nameParameter;
            &admin-state-upParameter; &tenant-idParameter; &routesParameter;
            &idParameter; <representation mediaType="application/json"
                element="csapi:router">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN">
                    <xsdxt:code
                        href="api_samples/router-post-resp.json"/>
                </wadl:doc>
            </representation>
        </response> &fault400; &fault401; </method>
    <method name="GET" id="showRouter">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="Show router details">
            <para role="shortdesc">Shows details for a
                router.</para>
            <para>This example request shows details for a router in
                JSON format:</para>
            <programlisting>GET /v2.0/routers/{router_id}
Accept: application/json</programlisting>
            <para>Use the <code>fields</code> query parameter to
                control which fields are returned in the response
                body. For information, see <link
                    xlink:href="http://specs.openstack.org/openstack/neutron-specs/specs/api/networking_general_api_information.html#filtering-and-column-selection"
                    >Filtering and Column Selection</link>.</para>
        </wadl:doc>
        <response status="200"> &routerParameter; &statusParameter;
            &external-gateway-infoParameter; &nameParameter;
            &admin-state-upParameter; &tenant-idParameter;
            &distributedOptionalParameter; &routesParameter; &haOptionalParameter;
            &idParameter; <representation mediaType="application/json"
                element="csapi:router">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN">
                    <xsdxt:code
                        href="api_samples/router-get-detail-resp.json"
                    />
                </wadl:doc>
            </representation>
        </response> &fault401; &fault403; &fault404; </method>
    <method name="PUT" id="updateRouter">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="Update router">
            <para role="shortdesc">Updates a logical router.</para>
            <para>You can update the name, administrative state, and
                the external gateway. For more information about how
                to set the external gateway for a router, see the
                create router operation. This operation does not
                enable the update of router interfaces. To update a
                router, use the add router interface and remove router
                interface operations.</para>
            <para>This example updates the external gateway
                information for a router:</para>
            <programlisting>PUT /v2.0/routers/{router_id}
Accept: application/json</programlisting>
        </wadl:doc>
        <request> &routerParameter; &external-gateway-infoOptionalParameter;
            &nameOptionalParameter; &admin-state-upOptionalParameter;
            <representation mediaType="application/json"
                element="csapi:router">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN">
                    <xsdxt:code
                        href="api_samples/router-put-update.req.json"
                    />
                </wadl:doc>
            </representation>
        </request>
        <response status="200"> &routerParameter; &statusParameter;
            &external-gateway-infoParameter; &nameParameter;
            &admin-state-upParameter; &tenant-idParameter; &routesParameter;
            &idParameter; <representation mediaType="application/json"
                element="csapi:router">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN">
                    <xsdxt:code
                        href="api_samples/router-put-update-resp.json"
                    />
                </wadl:doc>
            </representation>
        </response> &fault400; &fault401; &fault404; </method>
    <method name="DELETE" id="deleteRouter">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="Delete router">
            <para role="shortdesc">Deletes a logical router and, if
                present, its external gateway interface.</para>
            <para>This operation fails if the router has attached
                interfaces.</para>
            <para>Use the remove router interface operation to remove
                all router interfaces before you delete the
                router.</para>
            <para>This example deletes a router:</para>
            <programlisting>DELETE /v2.0/routers/{router_id}
Accept: application/json</programlisting></wadl:doc>
        <response status="204"/> &fault401; &fault404;
        &fault409conflict; </method>
    <method name="PUT" id="addRouterInterface">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="Add interface to router">
            <para role="shortdesc">
                Adds an internal interface to a logical router.
            </para>
            <para>
                Attaches a subnet to an internal router interface.
            </para>
            <para>
                Specify a subnet ID or port ID in the request body:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        Subnet ID. The gateway IP address for the subnet is
                        used to create the router interface.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Port ID. The IP address associated with the port is
                        used to create the router interface.
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                If you specify both IDs, the operation returns a <code>400 Bad
                Request</code> error.
            </para>
            <para>
                If the port is already used, the operation returns a <code>409
                Conflict</code> error.
            </para>
            <para>
                The port ID that is returned by this operation can be either:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        The same ID that is passed in the request body.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The ID of a port that is created by this operation to
                        attach the subnet to the router.
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                After you run this operation:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        The device ID of this port is set to the router ID.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The <code>device_owner</code> attribute is set to
                        <code>network:router_interface</code>.
                    </para>
                </listitem>
            </itemizedlist>
        </wadl:doc>
        <request>
            <representation
                mediaType="application/json" element="csapi:router">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN">
                    <xsdxt:code
                        href="api_samples/router-add-interface.req.json"
                    />
                </wadl:doc>
                &subnet-idParameter; &port-idParameter;
            </representation>
        </request>
        <response status="200">
            <representation
                mediaType="application/json" element="csapi:router">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN">
                    <xsdxt:code href="api_samples/router-add-interface-resp.json"/>
                </wadl:doc>
                &subnet-idParameter;
                &tenant-idParameter;
                &port-idParameter;
                &idParameter;
            </representation>
        </response>
        &fault400;
        &fault401;
        &fault404;
        &fault409;
    </method>
    <method name="PUT" id="removeRouterInterface">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="Remove interface from router">
            <para role="shortdesc">Removes an internal interface from
                a logical router.</para>
            <para>This operation removes an internal router interface,
                which detaches a subnet from the router. You must
                specify either a subnet ID or port ID in the request
                body; this value is used to identify the router
                interface to remove.</para>
            <para>
                You can specify both a subnet ID and port ID. If you specify
                both IDs, the subnet ID must correspond to the subnet ID of
                the first IP address on the port. Otherwise, the operation
                returns a <code>Conflict (409)</code> response code. The response
                contains information about the affected router and interface.
            </para>
            <para>
                The operation returns the <code>Not Found (404)</code>
                response code if the router or the subnet and port do not
                exist or are not visible to you. As a consequence of this
                operation, the port connecting the router with the subnet is
                removed from the subnet for the network.
            </para>
            <para>This example removes an interface from a
                router:</para>
            <programlisting>PUT /v2.0/routers/{router_id}/remove_router_interface
Accept: application/json</programlisting>
        </wadl:doc>
        <request> &subnet-idParameter; &port-idParameter;
                <representation mediaType="application/json"
                element="csapi:router">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN">
                    <xsdxt:code
                        href="api_samples/router-remove-interface-req.json"
                    />
                </wadl:doc>
            </representation>
        </request>
        <response status="200"> &idParameter; &tenant-idParameter;
            &port-idParameter; &subnet-idParameter; <representation
                mediaType="application/json" element="csapi:router">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN">
                    <xsdxt:code
                        href="api_samples/router-remove-interface-resp.json"
                    />
                </wadl:doc>
            </representation>
        </response> &fault400; &fault401; &fault404; &fault409; </method>
    <method name="GET" id="listFloatingIps">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="List floating IPs">
            <para role="shortdesc">
                Lists floating IPs that are accessible to the tenant who
                submits the request.
            </para>
            <para>
                Default policy settings return only those floating IPs that
                are owned by the tenant who submits the request, unless an
                admin user submits the request.
            </para>
            <para>This example request lists floating IPs in JSON
                format:</para>
            <programlisting>GET /v2.0/floatingips
Accept: application/json</programlisting>
            <para>
                Use the <code>fields</code> query parameter to control which
                fields are returned in the response body. Additionally, you
                can filter results by using query string parameters. For
                information, see <link
                    xlink:href="http://specs.openstack.org/openstack/neutron-specs/specs/api/networking_general_api_information.html#filtering-and-column-selection"
                    >Filtering and Column Selection</link>.
            </para>
        </wadl:doc>
        <response status="200"> &floating-ipsParameter;
            &router-idParameter; &tenant-idParameter; &floating-network-idParameter;
            &fixed-ip-addressResponseParameter; &floating-ip-addressResponseParameter;
            &port-idParameter; &floatingip-idParameter; &floatingip-statusParameter; <representation
                mediaType="application/json"
                element="csapi:floatingip">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN">
                    <xsdxt:code
                        href="api_samples/floating-ips-get-resp.json"
                    />
                </wadl:doc>
            </representation>
        </response> &fault401; </method>
    <method name="POST" id="createFloatingIp">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="Create floating IP">
            <para role="shortdesc">
                Creates a floating IP, and, if you specify port information,
                associates the floating IP with an internal port.
            </para>
            <para>
                To associate the floating IP with an internal port, specify
                the port ID attribute in the request body. If you do not
                specify a port ID in the request, you can issue a &PUT;
                request instead of a &POST; request.
            </para>
            <para>
                Default policy settings enable only administrative users to
                set floating IP addresses and some non-administrative users
                might require a floating IP address. If you do not specify a
                floating IP address in the request, the API automatically
                allocates one.
            </para>
            <para>
                By default, this operation associates the floating IP address
                with a single fixed IP address that is configured on an
                OpenStack Networking port. If a port has multiple IP
                addresses, you must specify the <code>fixed_ip_address</code>
                attribute in the request body to associate a specific fixed IP
                address with the floating IP address.
            </para>
            <para>
                You can create floating IPs on only external networks. When
                you create a floating IP, you must specify the ID of the
                network on which you want to create the floating IP.
                Alternatively, you can create a floating IP on a specific
                subnet in the external network, based on the costs and
                quality of that subnet.
            </para>
            <para>
                You must configure an IP address with the internal OpenStack
                Networking port that is associated with the floating IP
                address.
            </para>
            <para>Error codes:</para>
            <itemizedlist>
               <listitem>
                  <para>
                    <code>400</code> The operation returns this error code for
                    one of these reasons:
                </para>
                  <itemizedlist>
                     <listitem>
                        <para>The network is not external, such as
                           <code>router:external=False</code>.
                        </para>
                     </listitem>
                     <listitem>
                        <para>The internal OpenStack
                           Networking port is not associated with the floating IP
                           address.
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                           The requested floating IP address does not fall in the
                           subnet range for the external network.
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                           The fixed IP address is not valid.
                        </para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para><code>401</code> The operation is not authorized.
                  </para>
               </listitem>
               <listitem>
                  <para><code>404</code> The port ID is not valid.
                  </para>
               </listitem>
               <listitem>
                  <para>
                    <code>409</code> The operation returns this error code for
                    one of these reasons:
                </para>
                  <itemizedlist>
                     <listitem>
                        <para>
                           The requested floating IP address is already in use.
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                            The internal OpenStack Networking port and fixed IP
                            address are already associated with another floating IP.
                        </para>
                     </listitem>
                  </itemizedlist>
               </listitem>
            </itemizedlist>
        </wadl:doc>
        <request> &floatingipCreateRequestParams;
            <representation mediaType="application/json"
                element="csapi:floatingip">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN">
                    <xsdxt:code
                        href="api_samples/floatingip-post-req.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="201"> &floating-ipParameter;
            &fixed-ip-addressResponseParameter;
            &floating-ip-addressResponseParameter;
            &floating-network-idParameter; &floatingip-idParameter;
            &port-idParameter; &router-idParameter;
            &floatingip-statusParameter; &tenant-idParameter;
            <representation
                mediaType="application/json"
                element="csapi:floatingip">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN">
                    <xsdxt:code
                        href="api_samples/floatingip-post-resp.json"/>
                </wadl:doc>
            </representation>
        </response> &fault400; &fault401; &fault404; &fault409; </method>
    <method name="GET" id="showFloatingIp">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="Show floating IP details">
            <para role="shortdesc">Shows details for a
                floating IP.</para>
            <para>Use the <code>fields</code> query parameter to
                control which fields are returned in the response
                body. For information, see <link
                    xlink:href="http://specs.openstack.org/openstack/neutron-specs/specs/api/networking_general_api_information.html#filtering-and-column-selection"
                    >Filtering and Column Selection</link>.</para>
            <para>This example request shows details for a floating IP
                in JSON format. This example also filters the result
                by the <code>fixed_ip_address</code> and
                    <code>floating_ip_address</code> fields.</para>
            <programlisting>GET /v2.0/floatingips/{floatingip_id}?fields=fixed_ip_address&amp;fields=floating_ip_address
Accept: application/json</programlisting>
        </wadl:doc>
        <response status="200"> &floating-ipParameter;
            &floating-network-idParameter; &router-idParameter;
            &fixed-ip-addressResponseParameter;
            &floating-ip-addressResponseParameter;
            &tenant-idParameter; &floatingip-statusParameter;
            &port-idParameter; &floatingip-idParameter;
            <representation
                mediaType="application/json"
                element="csapi:floatingip">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN">
                    <xsdxt:code
                        href="api_samples/floatingip-get-detail-resp.json"
                    />
                </wadl:doc>
            </representation>
        </response> &fault401; &fault403; &fault404; </method>
    <method name="PUT" id="updateFloatingIp">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="Update floating IP">
            <para role="shortdesc">Updates a floating IP and its
                association with an internal port.</para>
            <para>The association process is the same as the process
                for the create floating IP operation.</para>
            <para>To disassociate a floating IP from a port, set the
                    <code>port_id</code> attribute to null or omit it
                from the request body.</para>
            <para>This example updates a floating IP:</para>
            <programlisting>PUT /v2.0/floatingips/{floatingip_id}
Accept: application/json</programlisting>
            <para>Depending on the request body that you submit, this
                request associates a port with or disassociates a port
                from a floating IP.</para>
        </wadl:doc>
        <request> &port-idParameter; <representation
                mediaType="application/json"
                element="csapi:floatingip">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN"
                    title="Update floating IP (associate port): JSON">
                    <xsdxt:code
                        href="api_samples/floatingip-put-update.req.json"
                    />
                </wadl:doc>
            </representation>
            <representation mediaType="application/json"
                element="csapi:floatingip">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN"
                    title="Update floating IP (disassociate port): JSON">
                    <xsdxt:code
                        href="api_samples/floatingip-put-disassociate-update.req.json"
                    />
                </wadl:doc>
            </representation>
        </request>
        <response status="200"> &floating-ipParameter;
            &floating-network-idParameter; &router-idParameter;
            &fixed-ip-addressResponseParameter;
            &floating-ip-addressResponseParameter;
            &tenant-idParameter; &floatingip-statusParameter;
            &port-idParameter; &floatingip-idParameter; <representation
                mediaType="application/json"
                element="csapi:floatingip">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN"
                    title="Update floating IP (associate port): JSON">
                    <xsdxt:code
                        href="api_samples/floatingip-put-update-resp.json"
                    />
                </wadl:doc>
            </representation>
            <representation mediaType="application/json"
                element="csapi:floatingip">
                <wadl:doc
                    xmlns:wadl="http://wadl.dev.java.net/2009/02"
                    xmlns="http://docbook.org/ns/docbook"
                    xml:lang="EN"
                    title="Update floating IP (disassociate port): JSON">
                    <xsdxt:code
                        href="api_samples/floatingip-put-disassociate-update-resp.json"
                    />
                </wadl:doc>
            </representation>
        </response> &fault400; &fault401; &fault404; &fault409; </method>
    <method name="DELETE" id="deleteFloatingIp">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="Delete floating IP">
            <para role="shortdesc">Deletes a floating IP and, if
                present, its associated port.</para>
            <para>This example deletes a floating IP:</para>
            <programlisting>DELETE /v2.0/floatingips/{floatingip_id}
Accept: application/json</programlisting></wadl:doc>
        <response status="204"/> &fault401; &fault404; </method>
</application>
